<?xml version="1.0" encoding="UTF-8"?>

<!-- Root Context: defines shared resources visible to all other web components -->

<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolve views based on string names -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="1" />
	</bean>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="2" />

	</bean>

	<context:component-scan base-package="org.mitre.crystal" />


	<!-- <bean class="org.mitre.crystal.model.instance.NoOpModelRunner"> -->
	<!-- <property name=""></property> -->
	<!-- </bean> -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<!-- <property name="url" value="jdbc:hsqldb:mem:crystal" /> -->
		<property name="url" value="jdbc:hsqldb:mem:crystal;sql.syntax_mys=true" />
		<!-- <property name="url" value="jdbc:hsqldb:file:/tmp/oic;sql.syntax_mys=true" 
			/> -->
		<property name="username" value="crystal" />
		<property name="password" value="crystal" />
	</bean>

	<!-- Use the following to set up the OIC tables in the in-memory DB If you 
		are using a file based HSQLDB you should not run this every time. -->
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="classpath:/db/tables/hsql_database_tables.sql" />
	</jdbc:initialize-database>

	<bean id="jpaAdapter"
		class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter">
		<property name="databasePlatform"
			value="org.eclipse.persistence.platform.database.HSQLPlatform" />
		<property name="showSql" value="true" />
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="packagesToScan" value="org.mitre.crystal" />
		<property name="persistenceProviderClass"
			value="org.eclipse.persistence.jpa.PersistenceProvider" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="jpaAdapter" />
		<property name="jpaPropertyMap">
			<map>
				<entry key="eclipselink.weaving" value="false" />
				<entry key="eclipselink.logging.level" value="FINEST" />
				<entry key="eclipselink.logging.level.sql" value="FINEST" />
				<entry key="eclipselink.cache.shared.default" value="false" />
			</map>
		</property>
	</bean>

	<import resource="modelExample.xml" />
	<bean id="inMemoryModelRepository"
		class="org.mitre.crystal.repository.model.impl.InMemoryModelRepository">
		<property name="mapOfModels">
			<map>
				<entry>
					<key>
						<value>1</value>
					</key>
					<ref bean="dummyModel" />
				</entry>
				<entry>
					<key>
						<value>2</value>
					</key>
					<ref bean="dummyModel2" />
				</entry>
				<entry>
					<key>
						<value>3</value>
					</key>
					<ref bean="yetAnotherModel" />
				</entry>
				<entry>
					<key>
						<value>4</value>
					</key>
					<ref bean="tailorModel" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="dummyModel" class="org.mitre.crystal.model.impl.DummyModel">
		<property name="id">
			<value>1</value>
		</property>
	</bean>
	
	<bean id="tailorModel" class="org.mitre.crystal.model.impl.TailorModel">
		<property name="id">
			<value>4</value>
		</property>
	</bean>


	<bean class="org.mitre.crystal.model.impl.DummyModel" id="dummyModel2">
		<property name="name">
			<value>BigOlFakeModel</value>
		</property>
		<property name="description">
			<value>This is how you set a value</value>
		</property>
		<property name="id">
			<value>2</value>
		</property>


	</bean>
	<bean id="dummyScoringModel" class="org.mitre.crystal.model.impl.DummyScoringModelImpl">
		<property name="resourceLocation">
		<value>dummyData/output</value>
		</property>
	</bean>


	<bean id="inMemoryScoringModelRepository"
		class="org.mitre.crystal.repository.scoreingmodel.impl.InMemoryScoringModelRepository">
		<property name="mapOfModels">
			<map>
				<entry>
					<key>
						<value>1</value>
					</key>
					<ref bean="dummyScoringModel" />
				</entry>
			</map>
		</property>
	</bean> 
	
	


	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>
